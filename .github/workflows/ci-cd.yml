name: CI - CD

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  master:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - uses: actions/checkout@v3
        name: Checkout [master]
        with:
          fetch-depth: 0

  pr:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

  check-packages:
    name: Check - Packages
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Check - Yarn dedupe
        run: yarn dedupe -c

      - name: Check - Packages dependencies
        run: yarn c:pkg:deps

  check-lint:
    name: Check - Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Check - Lint
        run: yarn c:lint:ci

  check-test:
    name: Check - Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Check - Test
        run: yarn c:test:ci

  check-type:
    name: Check - Type
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Check - Type
        run: yarn c:type

  build-api:
    name: Build api + Deploy if master - staging
    needs:
      - check-packages
      - check-lint
      - check-test
      - check-type
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3

      - name: Build image
        run: docker compose -f packages/api/environment/staging/docker-compose.staging.yml build

      - name: Push image to GitHub Container registry
        if: contains(github.ref, 'master')
        run: |
          echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u chnapy --password-stdin
          docker compose -f packages/api/environment/staging/docker-compose.staging.yml push

      - name: Copy docker-compose.yml file to remote server
        if: contains(github.ref, 'master')
        uses: appleboy/scp-action@master
        with:
          host: vps-0c88ff97.vps.ovh.net
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          source: 'packages/api/environment/staging/docker-compose.staging.yml'
          target: 'staging/api'
          strip_components: 4

      - name: Update remote server container with latest image
        if: contains(github.ref, 'master')
        uses: appleboy/ssh-action@master
        with:
          host: vps-0c88ff97.vps.ovh.net
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            docker stack deploy --prune -c ./staging/api/docker-compose.staging.yml bloup-api-staging --with-registry-auth

  build-web-app:
    name: Build web-app + Deploy
    needs:
      - check-packages
      - check-lint
      - check-test
      - check-type
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3

      - name: Build web-app
        run: yarn workspace web-app build

      - name: Deploy to Vercel (preview)
        uses: amondnet/vercel-action@v20
        id: now-deployment-PR
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_WEB_APP_ID }}

      - name: Deploy to Vercel (staging)
        uses: amondnet/vercel-action@v20
        id: now-deployment-staging
        if: contains(github.ref, 'master')
        with:
          github-comment: false
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_WEB_APP_ID }}
          vercel-args: '--prod'
